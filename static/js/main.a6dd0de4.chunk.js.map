{"version":3,"sources":["ui/Button.jsx","ui/ColorDiv.jsx","ui/ContainerRow.jsx","ui/RoundedButton.jsx","ui/MuteSVG.jsx","ui/UnmuteSVG.jsx","customHooks/useLocalStorage.jsx","ui/Layout.jsx","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["Button","children","cname","handleClick","val","onClick","value","className","ColorDiv","handleUserInput","ContainerRow","RoundedButton","MuteSVG","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","clipRule","UnmuteSVG","useLocalStorage","defaultValue","key","React","useState","highScore","window","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","initArray","Layout","seqArray","setSeqArray","userArray","setUserArray","wrong","setWrong","count","setCount","started","setStarted","classN","setClassN","classInput","setClassInput","isMuted","setIsMuted","level","setLevel","highscore","setHighscore","handleSeq","useCallback","genNum","Math","floor","random","e","target","setTimeout","clickedDiv","attributes","length","updateClassInput","Audio","play","trinkleClass","updateClass","cc","headMsg","btnMsg","document","addEventListener","removeEventListener","map","color","bgColor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a6dd0de4.chunk.js","sourcesContent":["const Button = ({ children, cname, handleClick, val }) => {\n  return (\n    <button\n      onClick={handleClick}\n      value={val}\n      className={`bg-primary hover:bg-primary-100 shadow-lg text-secondary focus:outline-none focus:ring-1 focus:ring-primary-100 focus:ring-opacity-50 w-40 h-10 text-2xl rounded-sm ${cname}`}\n    >\n      {children}\n    </button>\n  );\n};\n\n//<button className=\"bg-primary hover:bg-primary-100 text-2xl shadow-lg rounded-sm text-secondary focus:outline-none focus:ring-1 focus:ring-primary-100 focus:ring-opacity-50 w-40 h-10 sm:w-24 sm:h-7 sm:text-lg\"></button>\n//<button className=\"bg-primary hover:bg-primary-100 text-2xl shadow-lg rounded-sm text-secondary focus:outline-none focus:ring-1 focus:ring-primary-100 focus:ring-opacity-50 w-40 h-10 sm:invisible \"></button>\n//      bg-primary hover:bg-primary-100 shadow-lg text-secondary focus:outline-none focus:ring-1 focus:ring-primary-100 focus:ring-opacity-50 invisible sm:visible absolute right-0 w-8 h-8 rounded-full\n//      bg-primary hover:bg-primary-100 shadow-lg text-secondary focus:outline-none focus:ring-1 focus:ring-primary-100 focus:ring-opacity-50 text-2xl rounded-sm w-40 h-10\n\nexport default Button;\n","const ColorDiv = ({ cname, handleUserInput, val }) => (\n  <div\n    onClick={handleUserInput}\n    value={val}\n    className={`${cname} box-border w-32 h-32 sm:h-44 sm:w-44 p-4 m-3 sm:m-5 rounded-xl hover:shadow-2xl cursor-pointer border-2 border-bgcolor2 border-opacity-0 hover:border-opacity-100`}\n  />\n);\n\nexport default ColorDiv;\n","const ContainerRow = ({ children, cname }) => (\n  <div className={`flex flex-row justify-center ${cname}`}>{children}</div>\n);\n\nexport default ContainerRow;\n","const RoundedButton = ({ children, handleClick }) => {\n  return (\n    <button\n      onClick={handleClick}\n      className={`bg-primary hover:bg-primary-100 shadow-lg text-secondary focus:outline-none focus:ring-1 focus:ring-primary-100 focus:ring-opacity-50  invisible sm:visible absolute right-0 w-8 h-8 rounded-full`}\n    >\n      {children}\n    </button>\n  );\n};\n\n//<button className=\"bg-primary hover:bg-primary-100 text-2xl shadow-lg rounded-sm text-secondary focus:outline-none focus:ring-1 focus:ring-primary-100 focus:ring-opacity-50 w-40 h-10 sm:w-24 sm:h-7 sm:text-lg\"></button>\n//<button className=\"bg-primary hover:bg-primary-100 text-2xl shadow-lg rounded-sm text-secondary focus:outline-none focus:ring-1 focus:ring-primary-100 focus:ring-opacity-50 w-40 h-10 sm:invisible \"></button>\n//      bg-primary hover:bg-primary-100 shadow-lg text-secondary focus:outline-none focus:ring-1 focus:ring-primary-100 focus:ring-opacity-50 invisible sm:visible absolute right-0 w-8 h-8 rounded-full\n//      bg-primary hover:bg-primary-100 shadow-lg text-secondary focus:outline-none focus:ring-1 focus:ring-primary-100 focus:ring-opacity-50 text-2xl rounded-sm w-40 h-10\n\nexport default RoundedButton;\n","const MuteSVG = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n    className=\"w-5 h-5 m-auto inline mb-1\"\n  >\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      d=\"M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z\"\n      clipRule=\"evenodd\"\n    />\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      d=\"M17 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2\"\n    />\n  </svg>\n);\nexport default MuteSVG;\n","const UnmuteSVG = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n    className=\"w-5 h-5 m-auto inline mb-1\"\n  >\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      d=\"M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z\"\n    />\n  </svg>\n);\nexport default UnmuteSVG;\n","import React from \"react\";\n\nconst useLocalStorage = (defaultValue, key) => {\n  const [value, setValue] = React.useState(() => {\n    const highScore = window.localStorage.getItem(key);\n\n    return highScore !== null ? JSON.parse(highScore) : defaultValue;\n  });\n\n  React.useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue];\n};\n\nexport default useLocalStorage;\n","import { useState, useEffect, useCallback } from \"react\";\nimport Button from \"./Button\";\nimport ColorDiv from \"./ColorDiv\";\nimport ContainerRow from \"./ContainerRow\";\nimport RoundedButton from \"./RoundedButton\";\nimport \"../App.css\";\nimport MuteSVG from \"./MuteSVG\";\nimport UnmuteSVG from \"./UnmuteSVG\";\nimport useLocalStorage from \"../customHooks/useLocalStorage\";\n\nconst initArray = [\"yellow\", \"red\", \"blue\", \"white\"];\n\nconst Layout = () => {\n  const [seqArray, setSeqArray] = useState([]);\n  const [userArray, setUserArray] = useState([]);\n  const [wrong, setWrong] = useState(false);\n  const [count, setCount] = useState(0);\n  // const [timeleft, setTimeleft] = useState(1);\n  const [started, setStarted] = useState(false);\n  const [classN, setClassN] = useState(\"\");\n  const [classInput, setClassInput] = useState(\"\");\n  const [isMuted, setIsMuted] = useState(false);\n  const [level, setLevel] = useState(0);\n  // const [highscore, setHighscore] = useState(0);\n  const [highscore, setHighscore] = useLocalStorage(0, \"highscore\");\n\n  const handleSeq = useCallback(() => {\n    let genNum = Math.floor(Math.random() * 4);\n    setSeqArray([...seqArray, initArray[genNum]]);\n    setLevel(level + 1);\n    setUserArray([]);\n    setCount(0);\n  }, [seqArray, level]);\n\n  const handleClick = useCallback(\n    (e) => {\n      if (e.target.value === \"Stop\") {\n        setSeqArray([]);\n        setStarted(false);\n        setWrong(false);\n        setLevel(0);\n      } else {\n        setTimeout(() => handleSeq(), 1000);\n        setStarted(true);\n        setWrong(false);\n        setLevel(0);\n      }\n    },\n    [handleSeq]\n  );\n\n  const handleUserInput = (e) => {\n    if (!started) return;\n    if (!wrong) {\n      const clickedDiv = e.target.attributes.value.value;\n      if (seqArray[count] === clickedDiv) {\n        setUserArray([...userArray, clickedDiv]);\n        setCount(count + 1);\n        count + 1 >= seqArray.length && setTimeout(() => handleSeq(), 1000);\n        updateClassInput();\n        // sound effect onclick\n        if (!isMuted) {\n          let audio = new Audio(`/sounds/${clickedDiv}.mp3`);\n          audio.play();\n        }\n      } else {\n        // console.log(`Should be ${seqArray[count]}`);\n        trinkleClass();\n        setWrong(true);\n        level > highscore && setHighscore(level);\n        // sound effect onclick\n        if (!isMuted) {\n          let audio = new Audio(`/sounds/error.mp3`);\n          audio.play();\n        }\n      }\n    }\n  };\n\n  const trinkleClass = () => {\n    setTimeout(() => updateClass(), 500);\n    setTimeout(() => updateClass(), 800);\n    setTimeout(() => updateClass(), 1100);\n  };\n\n  const updateClass = useCallback(() => {\n    let cc = `${classN} border-opacity-100 bg-opacity-10`;\n    setClassN(cc);\n    setTimeout(() => setClassN(\"\"), 100);\n  }, [classN]);\n\n  useEffect(() => {\n    if (seqArray.length !== 0 && !wrong) {\n      updateClass();\n\n      // sound effect\n      if (!isMuted) {\n        let audio = new Audio(`/sounds/${seqArray[seqArray.length - 1]}.mp3`);\n        audio.play();\n      }\n    }\n    // eslint-disable-next-line\n  }, [seqArray, isMuted, wrong]);\n\n  const updateClassInput = () => {\n    let cc = `border-opacity-100 bg-opacity-50`;\n    setClassInput(cc);\n    setTimeout(() => setClassInput(\"\"), 100);\n  };\n\n  let headMsg = \"\";\n  if (!started) {\n    headMsg = (\n      <>\n        <span className=\"hidden sm:inline\">Press Any Key to Start</span>\n        <span className=\"sm:hidden\">Tab the Button to start</span>\n      </>\n    );\n  } else {\n    if (wrong) {\n      headMsg = `Game Over! Your score is ${level}`;\n    } else {\n      headMsg = `Level : ${level}`;\n    }\n  }\n\n  let btnMsg = \"\";\n  if (started) {\n    if (wrong) {\n      btnMsg = \"Restart\";\n    } else {\n      btnMsg = \"Stop\";\n    }\n  } else {\n    btnMsg = \"Start\";\n  }\n\n  // Start the game if any key is pressed\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleClick, false);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleClick, false);\n    };\n  }, [handleClick]);\n  return (\n    <div\n      className={`mx-auto flex flex-col h-screen ${\n        wrong ? \"bg-bgcolor2\" : \"bg-bgcolor\"\n      }`}\n    >\n      {/* Header */}\n      <ContainerRow>\n        <h1 className=\"text-secondary font-gugi text-2xl sm:text-4xl mt-10\">\n          {/* {!started ? \"Press Any Key to Start\" : `Level : ${level}`} */}\n          {headMsg}\n        </h1>\n      </ContainerRow>\n\n      {/* Button */}\n      <ContainerRow cname=\"my-8\">\n        <ContainerRow cname=\"relative w-72\">\n          <Button\n            cname=\"sm:w-24 sm:h-7 sm:text-lg\"\n            handleClick={handleClick}\n            val={started ? \"Stop\" : \"Start\"}\n          >\n            {/* {started ? \"Stop\" : \"Start\"} */}\n            {btnMsg}\n          </Button>\n          {/* <button onClick={handleClick} value={started ? \"Stop\" : \"Start\"}>\n            {started ? \"Stop\" : \"Start\"}\n          </button> */}\n          <RoundedButton handleClick={() => setIsMuted(!isMuted)}>\n            {isMuted ? <>{MuteSVG}</> : <span>{UnmuteSVG}</span>}\n          </RoundedButton>\n        </ContainerRow>\n      </ContainerRow>\n\n      {/* Up Row */}\n      <ContainerRow>\n        <ContainerRow cname=\"flex-wrap xs:w-4/5 sm:w-3/4 md:w-2/4 lg:w-2/5 xl:w-2/5\">\n          {initArray.map((color) => {\n            let bgColor = \"\";\n            if (color === \"yellow\") {\n              bgColor = \"bg-yellow\";\n            } else if (color === \"red\") {\n              bgColor = \"bg-red\";\n            } else if (color === \"blue\") {\n              bgColor = \"bg-blue\";\n            } else if (color === \"white\") {\n              bgColor = \"bg-white\";\n            }\n            return (\n              <ColorDiv\n                cname={`${\n                  color === seqArray[seqArray.length - 1] ? classN : \"\"\n                } ${\n                  color === userArray[userArray.length - 1] && classInput\n                } ${bgColor}`}\n                key={color}\n                handleUserInput={handleUserInput}\n                val={color}\n              />\n            );\n          })}\n        </ContainerRow>\n      </ContainerRow>\n\n      {/* High Score */}\n      <ContainerRow cname=\"mt-5\">\n        <div className=\"text-secondary text-lg\">\n          High Score: Level {highscore}\n        </div>\n      </ContainerRow>\n\n      {/* Mute Btn for Mobile */}\n      <ContainerRow cname=\"my-8\">\n        <Button\n          cname=\"sm:invisible mb-8\"\n          handleClick={() => setIsMuted(!isMuted)}\n          val=\"\"\n        >\n          {isMuted ? <>Unmute {UnmuteSVG}</> : <>Mute {MuteSVG}</>}\n          {/* Mute{\" \"} */}\n        </Button>\n      </ContainerRow>\n    </div>\n  );\n};\n\nexport default Layout;\n","// import { useState, useEffect } from \"react\";\nimport Layout from \"./ui/Layout\";\n// import \"./App.css\";\n// import Layout from \"./ui/Layout\";\n\n// const initArray = [\"Yellow\", \"Green\", \"Red\", \"Blue\"];\n\nconst App = () => {\n  // const [seqArray, setSeqArray] = useState([]);\n  // const [userArray, setUserArray] = useState([]);\n  // const [wrong, setWrong] = useState(false);\n  // const [count, setCount] = useState(0);\n  // // const [timeleft, setTimeleft] = useState(1);\n  // const [started, setStarted] = useState(false);\n  // const [classN, setClassN] = useState(\"\");\n  // const [classInput, setClassInput] = useState(\"\");\n  // const [isMuted, setIsMuted] = useState(false);\n  // const [level, setLevel] = useState(0);\n  // const [highscore, setHighscore] = useState(0);\n  // // useEffect(() => {\n  // //   started === true &&\n  // //     timeleft > 0 &&\n  // //     setTimeout(() => setTimeleft(timeleft - 1), 1000);\n  // // }, [started, timeleft]);\n\n  // const handleClick = (e) => {\n  //   if (e.target.value === \"Stop\") {\n  //     setSeqArray([]);\n  //     setStarted(false);\n  //     // setTimeleft(3);\n  //     setWrong(false);\n  //   } else {\n  //     setTimeout(() => handleSeq(), 1000);\n  //     setStarted(true);\n  //     setWrong(false);\n  //   }\n  // };\n\n  // const handleSeq = () => {\n  //   let genNum = Math.floor(Math.random() * 4);\n  //   setSeqArray([...seqArray, initArray[genNum]]);\n  //   setLevel(level + 1);\n  //   setUserArray([]);\n  //   setCount(0);\n  // };\n\n  // const handleUserInput = (e) => {\n  //   if (!started) return;\n  //   if (!wrong) {\n  //     if (seqArray[count] === e.target.value) {\n  //       setUserArray([...userArray, e.target.value]);\n  //       setCount(count + 1);\n  //       count + 1 >= seqArray.length && setTimeout(() => handleSeq(), 500);\n  //       updateClassInput();\n  //       // sound effect onclick\n  //       if (!isMuted) {\n  //         let audio = new Audio(`/sounds/${e.target.value}.mp3`);\n  //         audio.play();\n  //       }\n  //     } else {\n  //       console.log(\"Wrong!!!\");\n  //       console.log(`Should be ${seqArray[count]}`);\n  //       setWrong(true);\n  //       level > highscore && setHighscore(level);\n  //       setLevel(0);\n  //       // sound effect onclick\n  //       if (!isMuted) {\n  //         let audio = new Audio(`/sounds/error.mp3`);\n  //         audio.play();\n  //       }\n  //     }\n  //   }\n  // };\n\n  // const updateClassInput = () => {\n  //   let cc = `highlight2`;\n  //   setClassInput(cc);\n  //   setTimeout(() => setClassInput(\"\"), 500);\n  // };\n\n  // const updateClass = () => {\n  //   let cc = `${classN} highlight`;\n  //   setClassN(cc);\n  //   setTimeout(() => setClassN(\"\"), 500);\n  // };\n\n  // useEffect(() => {\n  //   if (seqArray.length !== 0 && !wrong) {\n  //     updateClass();\n\n  //     // sound effect\n  //     if (!isMuted) {\n  //       let audio = new Audio(`/sounds/${seqArray[seqArray.length - 1]}.mp3`);\n  //       audio.play();\n  //     }\n  //   }\n  // }, [seqArray]);\n  return (\n    <Layout />\n    // <div className=\"App\">\n    //   {/* {timeleft === 0 ? `Level: ${level}` : `Game Start in ${timeleft}`} */}\n    //   High Score: {highscore}\n    //   <br />\n    //   Initial Array = {initArray}\n    //   <br />\n    //   Sequence Array = {seqArray} <br />\n    //   User Array = {userArray} <br />\n    //   <button onClick={handleClick} value={started ? \"Stop\" : \"Start\"}>\n    //     {started ? \"Stop\" : \"Start\"}\n    //   </button>\n    //   <button onClick={() => setIsMuted(!isMuted)}>\n    //     {isMuted ? \"Unmute\" : \"Mute\"}\n    //   </button>\n    //   <br />\n    //   {initArray.map((color) => {\n    //     return (\n    //       <button\n    //         className={`element ${\n    //           color === seqArray[seqArray.length - 1] ? classN : \"\"\n    //         } ${color === userArray[userArray.length - 1] && classInput}`}\n    //         key={color}\n    //         onClick={handleUserInput}\n    //         value={color}\n    //       >\n    //         {color}\n    //       </button>\n    //     );\n    //   })}\n    // </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}